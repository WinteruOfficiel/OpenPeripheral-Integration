/*
 * OpenModsLib build file.
 * @author Arkan <arkan@emberwalker.cc>
 */

//================================================
// Pre-execute

buildscript {
    repositories {
        flatDir {
            dirs 'libs'
        }
        // General deps
        mavenLocal()
        mavenCentral()
        // Minecraft Forge
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

repositories {
    mavenLocal()

    flatDir {
        dirs 'libs'
    }
    maven {
        name = "ic2, forestry"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "mobius"
        url = "http://mobiusstrip.eu/maven"
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    // mirror for next repo (can be quite slow sometimes)
    maven {
        name "OpenMods Extras"
        url 'http://repo.openmods.info/artifactory/fireball-cache'
    }
    //maven {
    //    name "FireBall API Depot"
    //    url "http://dl.tsr.me/artifactory/libs-release-local"
    //}
    ivy {
        name 'mystcraft'
        artifactPattern "http://addons-origin.cursecdn.com/files/2266/246/[module]-[revision]-[classifier].[ext]"
    }
    // BuildCraft repo provided by OpenModsLib
}

apply plugin: 'forge'

//================================================
// Dependencies

dependencies {
    compile project(":OpenModsLib") // Load OpenModsLib from submodule

    // compile "openperipheral:OpenPeripheralCore-API:" + opc_api_version
    compile (name: "OpenPeripheralCore-API-" + opc_api_version, ext: 'jar')

    compile (name: "appliedenergistics2-rv3-beta-6", ext: 'jar') {
        transitive = false
    }

    // compile "net.industrial-craft:industrialcraft-2:2.2.828-experimental:api"
    compile (name: "industrialcraft-2-2.2.828-experimental", ext: 'jar')
    compile "api:mfr:1"
    compile "api:railcraft:1"
    compile (name: "forestry_1.7.10-4.2.16.64", ext: 'jar') 
    compile (name : "EnderCore-1.7.10-0.2.0.39_beta", ext: 'jar')
    compile (name : "EnderIO-1.7.10-2.3.0.429_beta", ext: 'jar')
    compile (name : "Mekanism-1.7.10-9.1.1.1031", ext: 'jar')
    
    compile (name: 'mystcraft-1.7.10-0.12.3.01', ext: 'jar')
    compile name: 'buildcraft', version: '7.1.16', classifier: 'api', ext: 'jar'
    compile (name: "immibis-microblocks-59.1.2", ext: 'jar')
    compile (name: "OpenComputers-MC1.7.10-1.7.2.1166-universal", ext: 'jar')
}

//================================================
// Jar data

// Grab system env
ext.env = System.getenv()

version = mc_ver + "-" + mod_version

ext.in_jenkins = false
// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = null
def hash = null
def proc1 = "git rev-parse --short HEAD".execute()
proc1.in.eachLine { line -> hash = line }
proc1.err.eachLine { line -> println line }
proc1.waitFor()

if (!in_jenkins) {
    def proc2 = "git rev-parse --abbrev-ref HEAD".execute()
    proc2.in.eachLine { line -> branch = line }
    proc2.err.eachLine { line -> println line }
    proc2.waitFor()
} else { // In Jenkins
    branch = env.GIT_BRANCH.minus("origin/")
}

// If not on master, add branch to jar name
if (branch != null && !branch.equals("master")) {
    version += "-" + branch
} else {
    //version += "-" + hash
}

// Version tag for jar file name
if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = 'run'

    replaceIn "openperipheral/integration/OpenPeripheralIntegration.java"
    replace '$VERSION$', mod_version
    replace '$OP-API-VERSION$', opc_api_version
    replace '$LIB-VERSION$', project(':OpenModsLib').mod_version
    replace '$NEXT-LIB-VERSION$', project(':OpenModsLib').next_mod_version
}

processResources {
    inputs.property "version", rootProject.mod_version

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':mod_version,'MCVersion':mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

//================================================
// Jar tasks

// Generate FML Coremod manifest
ext.fmlManifest = manifest {}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

// Dev jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

artifacts {
    archives deobfJar
}
